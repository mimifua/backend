import { Request, Response } from 'express';
import {v4 as uid} from 'uuid'
import bcrypt from 'bcrypt'

import { pool } from "../helpers/db.helpers";
import { UserRoles, Users } from "../models/users.models"; 
import { emailLoginSchema, RegisterUserSchema, userNameLoginSchema } from "../validators/auth.validators";


// export const registerUser = async(request:Request, response:Response) => {
export async function registerUser(request:Request, response:Response){
    /*
     * Registers new users into the system
     * id is auto-generated by uuid() for security
     * various inputs from user are first validated with joi
     * role is set to customer by default. Admin and Employee can be added by editing this
     * if any error occurrs, user will not be added to system
     * appropriate confirmation message is sent
    */

    const id=uid()
    const role=UserRoles.Customer
    const {username,email,password} = request.body
    const {error} = RegisterUserSchema.validate(request.body)
    
    try{
        if (error){
            return response.status(400).json({error:error.details[0].message})
        } else {
            const hashedPassword = await bcrypt.hash(password,9)

            await pool.query(
                `INSERT INTO users VALUES (
                '${id}',
                '${username}',
                '${email}',
                '${hashedPassword}',
                '${role}',
                0,
                0);`)

            return response.status(201).json({success:'Congratulations! You have successfully created a new account.'})
        }
    } catch(error){
        // console.error('Error occured at: ',error)
        return response.status(500).json({error:error})
    }
}


export async function loginUser(request:Request<{id:string}>, response:Response){
    /*
     * logins existing user
     * with either email/username and correct password
     * if incorrect appropriate error messages will be returned 
    */

    const id = request.params.id
    const {userNameOrEmail, password} = request.body
    const emailRegex = /^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,}$/
  
    try{
        // if user input email
        if (emailRegex.test(userNameOrEmail)){
            const {error} = emailLoginSchema.validate(request.body)
            if(error){
                return response.status(400).json({error:error.details[0].message})
            } else {
                // get the user from the db
                const [rows,fields] = await pool.query(
                    `SELECT * FROM users WHERE email='${userNameOrEmail}';`
                )
                // destructure the array
                const [user] = rows as Array<Users>
                
                // compare passwords
                const isValidUser = await bcrypt.compare(password,user.password)

                if (isValidUser){
                    return response.status(200).json({success:`Welcome back ${user.username}!`})
                } else {
                    return response.status(401).json({error:`Oops! Looks like you entered an invalid password. Try again?`})
                }
            }
        // else if user input is NOT email
        } else if (!emailRegex.test(userNameOrEmail)){
            const {error} = userNameLoginSchema.validate(request.body)
            if(error){
                return response.status(400).json({error:error.details[0].message})
            } else {
                // get user from the db
                const [rows,fields] = await pool.query(
                    `SELECT * FROM users WHERE username='${userNameOrEmail}';`
                )
                // destructure the array
                const [user] = rows as Array<Users>
                
                // compare passwords
                const isValidUser = await bcrypt.compare(password,user.password)

                if (isValidUser){
                    return response.status(200).json({success:`Welcome back ${user.username}!`})
                } else {
                    return response.status(401).json({error:`Oops! Looks like you entered an invalid password. Try again?`})
                }
            }
        }
    } catch(error){
        // console.error('Error occured at: ',error)
        return response.status(500).json({error:error})
    }
}